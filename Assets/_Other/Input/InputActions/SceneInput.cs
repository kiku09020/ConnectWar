//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Other/Input/InputActions/SceneInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SceneInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SceneInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SceneInput"",
    ""maps"": [
        {
            ""name"": ""Debug"",
            ""id"": ""d00efd91-1ab4-4534-8d4f-73761f9a78ee"",
            ""actions"": [
                {
                    ""name"": ""LoadPrevScene"",
                    ""type"": ""Button"",
                    ""id"": ""e2005bec-4b8f-4c19-8519-73b214029b44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoadNextScene"",
                    ""type"": ""Button"",
                    ""id"": ""9533feab-3632-405e-9325-675632daf056"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""key"",
                    ""id"": ""e4e84da9-6c4a-41d5-89f1-7fe2b91bee72"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadPrevScene"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""6c888204-5eef-4c04-ae30-0dd8693b0077"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadPrevScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4c31acf9-3f6c-4e92-aa76-4d75ea91b987"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadPrevScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""key"",
                    ""id"": ""00245dd6-c183-475b-a859-75c22458b0f9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadNextScene"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""710133dc-018f-46d3-b60b-a01db86ff8f9"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadNextScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""00dcec61-b63c-4046-95d1-1348917fcbe0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoadNextScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_LoadPrevScene = m_Debug.FindAction("LoadPrevScene", throwIfNotFound: true);
        m_Debug_LoadNextScene = m_Debug.FindAction("LoadNextScene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_LoadPrevScene;
    private readonly InputAction m_Debug_LoadNextScene;
    public struct DebugActions
    {
        private @SceneInput m_Wrapper;
        public DebugActions(@SceneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LoadPrevScene => m_Wrapper.m_Debug_LoadPrevScene;
        public InputAction @LoadNextScene => m_Wrapper.m_Debug_LoadNextScene;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @LoadPrevScene.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnLoadPrevScene;
                @LoadPrevScene.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnLoadPrevScene;
                @LoadPrevScene.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnLoadPrevScene;
                @LoadNextScene.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnLoadNextScene;
                @LoadNextScene.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnLoadNextScene;
                @LoadNextScene.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnLoadNextScene;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LoadPrevScene.started += instance.OnLoadPrevScene;
                @LoadPrevScene.performed += instance.OnLoadPrevScene;
                @LoadPrevScene.canceled += instance.OnLoadPrevScene;
                @LoadNextScene.started += instance.OnLoadNextScene;
                @LoadNextScene.performed += instance.OnLoadNextScene;
                @LoadNextScene.canceled += instance.OnLoadNextScene;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IDebugActions
    {
        void OnLoadPrevScene(InputAction.CallbackContext context);
        void OnLoadNextScene(InputAction.CallbackContext context);
    }
}
